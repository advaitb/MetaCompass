"""
DESCRIPTION
"""
#__author__ = "Victoria Cepeda

#configfile: expand("config.json",

#include_prefix="https://"
#include_prefix + "rules"

#os.system("touch %s"%config['reads'][0])
ruleorder: kmer_mask > fastq2fasta > reference_recruitment > bowtie2_map > build_contigs


#code to skip initial steps if reference genomes provided 
if config['reads'][0] != "" and config['ref'] != "%s"%expand('{sample}.0.assembly.out/mc.refseq.fna',sample=config['sample'])[0]:

     os.system("touch %s"%expand('{prefix}/{sample}.marker.match.1.fastq',prefix=config['prefix'],sample=config['sample'])[0])
     os.system("touch %s"%expand('{prefix}/{sample}.fasta',prefix=config['prefix'],sample=config['sample'])[0])
     #print("%s"%expand('{prefix}/{sample}.{iter}.assembly.out',prefix=config['prefix'],sample=config['sample'],iter=config['iter'])[0])
     os.system("mkdir -p %s"%expand('{prefix}/{sample}.0.assembly.out',prefix=config['prefix'],sample=config['sample'])[0])
     os.system("mkdir -p %s"%expand('{prefix}/{sample}.{iter}.assembly.out',prefix=config['prefix'],sample=config['sample'],iter=config['iter'])[0])
     #print(expand('{prefix}/{sample}.0.assembly.out/mc.refseq.fna',prefix=config['prefix'],sample=config['sample'])[0])
     os.system("touch %s"%expand('{prefix}/{sample}.0.assembly.out/mc.refseq.fna',prefix=config['prefix'],sample=config['sample'])[0])
     #if not os.path.exists("%s"%expand('{prefix}/{sample}.0.assembly.out/{sample}.fq',prefix=config['prefix'],sample=config['sample'])[0]):
     #    os.system("cp %s %s"%(config['reads'],expand('{prefix}/{sample}.0.assembly.out/{sample}.fq',prefix=config['prefix'],sample=config['sample'])[0]))

rule all:
    input:expand('{prefix}/{sample}.{iter}.assembly.out/contigs.fasta',sample=config["sample"],prefix=config["prefix"],iter=config["iter"])
    benchmark:
       "%s/benchmarks/all/%s.txt"%(config['prefix'],config['sample'])


rule kmer_mask:
    input:expand('{reads}',reads=config['reads'])[0]
    output:
        fastq=expand('{prefix}/{sample}.marker.match.1.fastq',prefix=config['prefix'],sample=config['sample'])[0]
    message: """---kmer-mask fastq"""
    benchmark:
       "%s/benchmarks/kmermask/%s.txt"%(config['prefix'],config['sample'])
    params:
        out=expand('{prefix}/{sample}.marker',prefix=config['prefix'],sample=config['sample']),
        len=str(config["length"]+3)
    threads:config["nthreads"]

    shell : "kmer-mask -ms 28 -mdb ../refseq/kmer-mask_db/markers.mdb -1 {input} -clean 0.0 -match 0.01 -nomasking -t {threads} -l {params.len} -o {params.out}"


rule fastq2fasta:
    input: rules.kmer_mask.output
    output:expand('{prefix}/{sample}.fasta',prefix=config['prefix'],sample=config['sample'])
    message: """---Converting fastq to fasta."""
    shell : "perl ../bin/fq2fa.pl -i {input} -o {output}"


rule reference_recruitment:
    input:
        rules.fastq2fasta.output
    benchmark:
       "%s/benchmarks/reference_recruitment/%s.txt"%(config['prefix'],config['sample'])
    output:
        out =expand('{prefix}/{sample}.{iter}.assembly.out',prefix=config['prefix'],sample=config['sample'],iter=config['iter']),
	reffile =expand('{prefix}/{sample}.0.assembly.out/mc.refseq.fna',prefix=config['prefix'],sample=config['sample'])
    #fqfile =expand('{prefix}/{sample}.0.assembly.out/{sample}.fq',prefix=config['prefix'],sample=config['sample'])
    #'{prefix}/{sample}.{iter}.assembly.out/mc.refseq.fna'
    log:'%s/%s.%s.step1.log'%(config['prefix'],config['sample'],config['iter'])
    message: """---reference recruitment."""
    threads:config["nthreads"]

    shell:"mkdir -p {output.out}; ../bin/pickrefseqs.pl {input} {output.out} {threads}  1> {log} 2>&1"


rule bowtie2_map:
    input:
       ref=rules.reference_recruitment.output.reffile,
       reads=expand('{reads}',reads=config['reads'])[0]
       #reads=rules.reference_recruitment.output.fqfile
    benchmark:
       "%s/benchmarks/bowtie2_map/%s.txt"%(config['prefix'],config['sample'])
    output:
       index= '%s.%s.assembly.out/%s.index'%(config['sample'],config['iter'],config['sample']),
       pref='%s.%s.assembly.out/%s.index'%(config['sample'],config['iter'],config['sample']),
       sam='%s.%s.assembly.out/%s.sam'%(config['sample'],config['iter'],config['sample'])
    log: '%s.%s.step2.log'%(config['sample'],config['iter'])
    threads:config["nthreads"]
    message: """---Build index ."""
    shell:"bowtie2-build -q %s {output.pref} 1>> {output.index} 2>&1;bowtie2 -a --end-to-end --very-sensitive -p {threads} -x {output.pref} -q -U {input.reads} -S {output.sam} > {log} 2>&1"%(config['ref'])


#shell:"bowtie2-build --threads {threads} -q {input.ref} {output.pref} 1>> {output.index} 2>&1;bowtie2 --end-to-end -D 15 -R 2 -N 0 -L 31 -i S,1,1.15 -p {threads} -x {output.pref} -f {input.reads} -S {output.sam} > {log} 2>&1"


rule build_contigs:
    input:
        genome = '%s/%s'%(config['prefix'],config['ref']),
        sam=  rules.bowtie2_map.output.sam
    benchmark:
       "%s/benchmarks/build_contigs/%s.txt"%(config['prefix'],config['sample'])
    params:
        pickref="%s"%(config['pickref'])
    output:
        out='%s/%s.%s.assembly.out'%(config['prefix'],config['sample'],config['iter']),
        contigs='%s/%s.%s.assembly.out/contigs.fasta'%(config['prefix'],config['sample'],config['iter'])
    log:'%s/%s.%s.assembly.out/%s.assembly.log'%(config['prefix'],config['sample'],config['iter'],config['sample'])
    threads:1
    message: """---Build contigs ."""
    shell:"../bin/buildcontig -r {input.genome} -s {input.sam} -o {output.out} -c 2 -l 300 -n T -b F -u F -k {params.pickref}  1>> {log} 2>&1"




