"""
DESCRIPTION
"""
#__author__ = "Victoria Cepeda

configfile: "config.json"

#include_prefix="https://"
#include_prefix + "rules"

#ruleorder: rule1 > rule2 > rule3
rule all:
    input:expand('{prefix}/{sample}.{iter}.assembly.out/contigs.fasta',sample=config["sample"],prefix=config["prefix"],iter=config["iter"])

rule kmer_mask:
    input: '%s/%s.fq'%(config['prefix'],config['sample'])
    output:
        fastq='%s/%s.marker.match.1.fastq'%(config['prefix'],config['sample'])
    message: """---kmer-mask fastq"""
    params:'%s/%s.marker'%(config['prefix'],config['sample'])
    threads:config["nthreads"]

    shell : "kmer-mask -ms 28 -mdb ../refseq/kmer-mask_db/markers.mdb -1 {input} -clean 0.0 -match 0.01 -nomasking -t {threads} -l 103 -o {params}"


rule fastq2fasta:
    input: rules.kmer_mask.output
    output:'%s/%s.fasta'%(config['prefix'],config['sample'])
    message: """---Converting fastq to fasta."""
    shell : "perl ../bin/fq2fa.pl -i {input} -o {output}"


rule reference_recruitment:
    input:
        rules.fastq2fasta.output
    output:
        out ='%s/%s.%s.assembly.out'%(config['prefix'],config['sample'],config['iter']),
	reffile ='%s/%s.0.assembly.out/mc.refseq.fna'%(config['prefix'],config['sample'])
    #'{prefix}/{sample}.{iter}.assembly.out/mc.refseq.fna'
    log:'%s/%s.%s.step1.log'%(config['prefix'],config['sample'],config['iter'])
    message: """---reference recruitment."""
    threads:config["nthreads"]
    shell:"mkdir -p {output.out}; ../bin/pickrefseqs.pl {input} {output.out} {threads}  1> {log} 2>&1"

rule bowtie2_map:
    input:
       ref=rules.reference_recruitment.output.reffile,
       reads=rules.fastq2fasta.output
    output:
       index= '%s.%s.assembly.out/%s.index'%(config['sample'],config['iter'],config['sample']),
       pref='%s.%s.assembly.out/%s.index'%(config['sample'],config['iter'],config['sample']),
       sam='%s.%s.assembly.out/%s.sam'%(config['sample'],config['iter'],config['sample'])
    log: '%s.%s.step2.log'%(config['sample'],config['iter'])
    threads:config["nthreads"]
    message: """---Build index ."""
    shell:"bowtie2-build -q %s {output.pref} 1>> {output.index} 2>&1;bowtie2 -a --end-to-end -D 15 -R 2 -N 0 -L 31 -i S,1,1.15 -p {threads} -x {output.pref} -f {input.reads} -S {output.sam} > {log} 2>&1"%(config['ref'])


#shell:"bowtie2-build --threads {threads} -q {input.ref} {output.pref} 1>> {output.index} 2>&1;bowtie2 --end-to-end -D 15 -R 2 -N 0 -L 31 -i S,1,1.15 -p {threads} -x {output.pref} -f {input.reads} -S {output.sam} > {log} 2>&1"

rule build_contigs:
    input:
        #mc.refseq.fna',
        genome = '%s/%s'%(config['prefix'],config['ref']),
        sam=  rules.bowtie2_map.output.sam
        #'%s/%s.%s.assembly.out/%s.sam'%(config['prefix'],config['sample'],config['iter'],config['sample'])
    output:
        out='%s/%s.%s.assembly.out'%(config['prefix'],config['sample'],config['iter']),
        contigs='%s/%s.%s.assembly.out/contigs.fasta'%(config['prefix'],config['sample'],config['iter'])
    log:'%s/%s.%s.assembly.out/%s.assembly.log'%(config['prefix'],config['sample'],config['iter'],config['sample'])
    threads:1
    message: """---Build contigs ."""
    shell:'../bin/buildcontig -r {input.genome} -s {input.sam} -o {output.out} -c 2 -l 300 -n T -b T -u T -k breadth  1>> {log} 2>&1'


